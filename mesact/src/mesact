#!/usr/bin/env python3

"""
To Do:
Make it work!

"""
VERSION = '0.0.1'

import sys, os
from functools import partial

from PyQt5 import QtCore, uic, QtWidgets
from PyQt5.QtWidgets import (QApplication, QMainWindow, QMessageBox,
	QDialog, qApp)
from PyQt5.QtGui import QPixmap

from libmesact.ui_mesact import Ui_mainWindow
from libmesact import utilities
from libmesact import buildcombos
from libmesact import buildmenus
from libmesact import firmware
from libmesact import card
from libmesact import loadini
from libmesact import checkconfig
from libmesact import buildconfig
from libmesact import extcmd

class VersionError(QMainWindow):
	def __init__(self):
		super(VersionError, self).__init__()
		print('wrong python version')
		msgBox = QMessageBox()
		msgBox.setIcon(QMessageBox.Warning)
		msgBox.setWindowTitle('Version Error')
		msgBox.setText('Python 3.6 or newer is required.\nYour Python is {}'.format(sys.version[0:3]))
		msgBox.setStandardButtons(QMessageBox.Ok)
		msgBox.exec()
		sys.exit()

class MainWindow(QMainWindow, Ui_mainWindow):
	def __init__(self):
		super().__init__()
		self.setupUi(self) # needed to load Ui_MainWindow
		self.trans = QtCore.QTranslator(self)
		if os.path.split(sys.argv[0])[0] == '/usr/bin':
			self.lib_path = '/usr/lib/libmesact'
			self.firmware_path = '/usr/lib/libmesact'
			self.image_path = '/usr/lib/libmesact'

		if os.path.split(sys.argv[0])[0] == '.':
			srcPath = os.path.split(os.path.realpath(sys.argv[0]))[0]
			self.lib_path = os.path.join(srcPath, 'libmesact')
			self.firmware_path = os.path.join(srcPath, 'firmware')
			self.image_path = os.path.join(srcPath, 'images')

		self.version = VERSION
		self.emcVersion = '1.1'
		self.setWindowTitle(f'Mesa Configuration Tool Version {self.version}')
		self.board = ''
		self.boardType = '' # pci or eth
		self.cardType_0 = '' # step or servo
		self.fw = firmware
		self.axes = 0
		buildcombos.build(self)
		buildmenus.build(self)
		utilities.setup(self)
		#self.helpInfo = helptext.descriptions

		self.extcmd = extcmd.extcmd()
		#self.ladderOptionsList = utilities.plcOptions()
		self.setupConnections()
		self.show()
		#loadini.openini(self, 'mesa-5i25-7i76')
		#loadini.openini(self, 'mesa-5i25-7i77')
		#loadini.openini(self, 'mesa-7i76e')
		#loadini.openini(self, 'mesa-7i92-7i76')
		#loadini.openini(self, 'mesa-7i95')
		#loadini.openini(self, 'mesa-7i96')

	def setupConnections(self):
		# Menu Items
		self.actionEnglish.triggered.connect(partial(self.change_language, None))
		self.actionGerman.triggered.connect(partial(self.change_language, 'eng-de'))
		self.actionFrench.triggered.connect(partial(self.change_language, 'eng-fr'))
		self.actionOpen.triggered.connect(partial(loadini.openini, self))
		self.actionCheck.triggered.connect(partial(checkconfig.checkit, self))
		self.actionBuild.triggered.connect(partial(buildconfig.build, self))

		# Machine Group
		self.configName.textChanged[str].connect(partial(utilities.configNameChanged, self))
		self.boardCB.currentIndexChanged.connect(partial(utilities.boardChanged, self))
		self.firmwareCB.currentIndexChanged.connect(partial(utilities.firmwareChanged, self))
		for i in range(2):
			getattr(self, f'daughterCB_{i}').currentIndexChanged.connect(partial(utilities.daughterCardChanged, self))

		# Firmware Group
		self.readpdPB.clicked.connect(partial(card.readpd, self))
		self.readhmidPB.clicked.connect(partial(card.readhmid, self))
		self.flashPB.clicked.connect(partial(card.flashCard, self))
		self.reloadPB.clicked.connect(partial(card.reloadCard, self))
		self.verifyPB.clicked.connect(partial(card.verifyCard, self))


		# Joint Tabs
		for i in range(6): # First Card Only for now
			for j in range(2):
				getattr(self, f'c{j}_axisCB_{i}').currentIndexChanged.connect(partial(utilities.axisChanged, self))
				getattr(self, f'c{j}_scale_{i}').textChanged.connect(partial(utilities.updateAxisInfo, self))
				getattr(self, f'c{j}_maxVelocity_{i}').textChanged.connect(partial(utilities.updateAxisInfo, self))
				getattr(self, f'c{j}_maxAccel_{i}').textChanged.connect(partial(utilities.updateAxisInfo, self))
				getattr(self, f'c{j}_pidDefault_{i}').clicked.connect(partial(utilities.pidSetDefault, self))
				getattr(self, f'c{j}_driveCB_{i}').currentIndexChanged.connect(partial(utilities.driveChanged, self))

		# Spindle Tab
		self.pidDefault_s.clicked.connect(partial(utilities.pidSetDefault, self))

		# Smart Serial Tab
		self.ssCardCB.currentIndexChanged.connect(partial(utilities.ssCardChanged, self))

	def change_language(self, translationFile = None):
		#print(self.sender().text())
		if translationFile:
			self.trans.load(os.path.join(self.lib_path, translationFile))
			QtWidgets.QApplication.instance().installTranslator(self.trans)
			self.retranslateUi(self)
		else:
			QtWidgets.QApplication.instance().removeTranslator(self.trans)
			self.retranslateUi(self)

	def errorMsg(self, text, title=None):
		msgBox = QMessageBox()
		msgBox.setIcon(QMessageBox.Warning)
		msgBox.setWindowTitle(title)
		msgBox.setText(text)
		msgBox.setStandardButtons(QMessageBox.Cancel | QMessageBox.Ok)
		returnValue = msgBox.exec()
		if returnValue == QMessageBox.Ok:
			return True
		else:
			return False

	def errorMsgOk(self, text, title=None):
		msgBox = QMessageBox()
		msgBox.setIcon(QMessageBox.Warning)
		msgBox.setWindowTitle(title)
		msgBox.setText(text)
		msgBox.setStandardButtons(QMessageBox.Ok)
		returnValue = msgBox.exec()
		if returnValue == QMessageBox.Ok:
			return True
		else:
			return False

	def help(self, tab):
		if tab == 0:
			tab = self.tabWidget.currentIndex()
		dialog = QDialog()
		dialog.ui = helpDialog()
		dialog.ui.setupUi(dialog)
		dialog.ui.label.setText(helptext.descriptions(tab))
		dialog.exec_()



def main():
	app = QApplication(sys.argv)
	if float(sys.version[0:3]) < 3.6:
		ex = VersionError()
	else:
		ex = MainWindow()
	sys.exit(app.exec_())

if __name__ == "__main__":
	main()

